// Generated by gencpp from file ourSensor_msgs/Accel.msg
// DO NOT EDIT!


#ifndef OURSENSOR_MSGS_MESSAGE_ACCEL_H
#define OURSENSOR_MSGS_MESSAGE_ACCEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ourSensor_msgs
{
template <class ContainerAllocator>
struct Accel_
{
  typedef Accel_<ContainerAllocator> Type;

  Accel_()
    : accel1_x(0.0)
    , accel1_y(0.0)  {
    }
  Accel_(const ContainerAllocator& _alloc)
    : accel1_x(0.0)
    , accel1_y(0.0)  {
  (void)_alloc;
    }



   typedef double _accel1_x_type;
  _accel1_x_type accel1_x;

   typedef double _accel1_y_type;
  _accel1_y_type accel1_y;





  typedef boost::shared_ptr< ::ourSensor_msgs::Accel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ourSensor_msgs::Accel_<ContainerAllocator> const> ConstPtr;

}; // struct Accel_

typedef ::ourSensor_msgs::Accel_<std::allocator<void> > Accel;

typedef boost::shared_ptr< ::ourSensor_msgs::Accel > AccelPtr;
typedef boost::shared_ptr< ::ourSensor_msgs::Accel const> AccelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ourSensor_msgs::Accel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ourSensor_msgs::Accel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ourSensor_msgs::Accel_<ContainerAllocator1> & lhs, const ::ourSensor_msgs::Accel_<ContainerAllocator2> & rhs)
{
  return lhs.accel1_x == rhs.accel1_x &&
    lhs.accel1_y == rhs.accel1_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ourSensor_msgs::Accel_<ContainerAllocator1> & lhs, const ::ourSensor_msgs::Accel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ourSensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ourSensor_msgs::Accel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ourSensor_msgs::Accel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ourSensor_msgs::Accel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ourSensor_msgs::Accel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ourSensor_msgs::Accel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ourSensor_msgs::Accel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ourSensor_msgs::Accel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "136544c7034858b5ba440b7169a0f268";
  }

  static const char* value(const ::ourSensor_msgs::Accel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x136544c7034858b5ULL;
  static const uint64_t static_value2 = 0xba440b7169a0f268ULL;
};

template<class ContainerAllocator>
struct DataType< ::ourSensor_msgs::Accel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ourSensor_msgs/Accel";
  }

  static const char* value(const ::ourSensor_msgs::Accel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ourSensor_msgs::Accel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 accel1_x \n"
"float64 accel1_y \n"
"\n"
;
  }

  static const char* value(const ::ourSensor_msgs::Accel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ourSensor_msgs::Accel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accel1_x);
      stream.next(m.accel1_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Accel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ourSensor_msgs::Accel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ourSensor_msgs::Accel_<ContainerAllocator>& v)
  {
    s << indent << "accel1_x: ";
    Printer<double>::stream(s, indent + "  ", v.accel1_x);
    s << indent << "accel1_y: ";
    Printer<double>::stream(s, indent + "  ", v.accel1_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OURSENSOR_MSGS_MESSAGE_ACCEL_H
